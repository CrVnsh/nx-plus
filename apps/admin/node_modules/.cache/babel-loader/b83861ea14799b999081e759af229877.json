{"remainingRequest":"/Users/WilliamsZJ/repos/nx-plus/node_modules/babel-loader/lib/index.js!/Users/WilliamsZJ/repos/nx-plus/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/WilliamsZJ/repos/nx-plus/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/WilliamsZJ/repos/nx-plus/node_modules/vue-image-crop-upload/upload-2.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/WilliamsZJ/repos/nx-plus/node_modules/vue-image-crop-upload/upload-2.vue","mtime":499162500000},{"path":"/Users/WilliamsZJ/repos/nx-plus/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/WilliamsZJ/repos/nx-plus/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/WilliamsZJ/repos/nx-plus/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/WilliamsZJ/repos/nx-plus/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}